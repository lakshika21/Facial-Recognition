import cv2
import numpy as np

# Load pre-trained Haar cascade for face detection
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Load pre-trained deep learning model for expression recognition
model_file = 'expression-recognition-model.xml'
model_weights = 'expression-recognition-model.bin'
net = cv2.dnn.readNetFromCaffe(model_file, model_weights)

# Define the labels for each expression
EMOTIONS = ["Angry", "Disgust", "Fear", "Happy", "Neutral", "Sad", "Surprise"]

# Set up camera capture
cap = cv2.VideoCapture(0)

while True:
    # Read in the image from the camera
    ret, img = cap.read()
    
    # Convert image to grayscale for face detection
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Detect faces in the graâ€¦
[11:41 pm, 15/02/2023] Hemsa: import cv2
import numpy as np

# Load pre-trained Haar cascade for face detection
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Load pre-trained deep learning model for expression recognition
model_file = 'expression-recognition-model.xml'
model_weights = 'expression-recognition-model.bin'
net = cv2.dnn.readNetFromCaffe(model_file, model_weights)

# Define the labels for each expression
EMOTIONS = ["Angry", "Disgust", "Fear", "Happy", "Neutral", "Sad", "Surprise"]

# Set up camera capture
cap = cv2.VideoCapture(0)

while True:
    # Read in the image from the camera
    ret, img = cap.read()
    
    # Convert image to grayscale for face detection
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Detect faces in the grayscale image
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    
    # Loop over each face and classify the expression
    for (x,y,w,h) in faces:
        # Extract the face region
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w]

        # Preprocess the face region for the DNN model
        roi_gray = cv2.resize(roi_gray, (48, 48))
        roi_gray = roi_gray.astype("float") / 255.0
        roi_gray = np.expand_dims(roi_gray, axis=0)
        roi_gray = np.expand_dims(roi_gray, axis=-1)

        # Pass the face region through the DNN model to classify the expression
        net.setInput(roi_gray)
        preds = net.forward()
        emotion = EMOTIONS[preds[0].argmax()]

        # Draw a bounding box around the face and label it with the expression
        cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.putText(img, emotion, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

    # Display the image with face detection and expression recognition
    cv2.imshow('img', img)

    # Check for the 'q' key to quit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close the window
cap.release()
cv2.destroyAllWindows()
